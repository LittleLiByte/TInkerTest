apply plugin: 'com.android.application'
apply plugin: 'com.tencent.tinker.patch'


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.1'
    //optional, help to generate the final application
    provided('com.tencent.tinker:tinker-android-anno:1.7.7')
    //tinker's main Android lib
    compile('com.tencent.tinker:tinker-android-lib:1.7.7')
    compile "com.android.support:multidex:1.0.1"
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}
def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}
android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    defaultConfig {
        applicationId "com.cn21.tinkertest"
        minSdkVersion 10
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"

    }

//    productFlavors {
//        qiho360 {
//            applicationId 'tinker.sample.android.qiho360'
//        }
//
//        qq {
//            applicationId 'tinker.sample.android.qq'
//        }
//    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

}

//全局信息相关的配置项
tinkerPatch {
    //有问题的apk的地址  准apk包的路径，必须输入，否则会报错
    oldApk = "/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk"
    //
    ignoreWarning = false
    //在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名
    useSign = true
    //编译相关的配置项
    buildConfig {
        //在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。
        // 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。
        tinkerId = getTinkerIdValue()
    }
    //用于生成补丁包中的'package_meta.txt'文件
    packageConfig {
        /**
         * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
         * package meta file gen. path is assets/package_meta.txt in patch file
         * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
         * or TinkerLoadResult.getPackageConfigByName
         * we will get the TINKER_ID from the old apk manifest for you automatic,
         * other config files (such as patchMessage below)is not necessary
         */
        configField("patchMessage", "tinker is sample to use")
        /**
         * just a sample case, you can use such as sdkVersion, brand, channel...
         * you can parse it in the SamplePatchListener.
         * Then you can use patch conditional!
         */
        configField("platform", "all")
        /**
         * patch version via packageConfig
         */
        configField("patchVersion", "1.0")
    }
    //dex相关的配置项
    dex {
        //只能是'raw'或者'jar'。
        //对于'raw'模式，我们将会保持输入dex的格式。
        //对于'jar'模式，我们将会把输入dex重新压缩封装到jar。
        // 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()
        dexMode = "jar"
        //需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...
        pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]
        //它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。
        loader = ["com.tencent.tinker.loader.*", "com.cn21.tinkertest.MyApplication"]
        /**
         * 这里需要定义的类有：
         1. 你自己定义的Application类；
         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；
         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；
         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，
         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。
         */
    }
    //lib相关的配置项
    lib {
        //需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...
        pattern = ["lib/armeabi/*.so", "lib/arm64-v8a/*.so", "lib/armeabi-v7a/*.so", "lib/mips/*.so", "lib/mips64/*.so", "lib/x86/*.so", "lib/x86_64/*.so"]
    }
    //res相关的配置项
    res {
        pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        //对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。
        // 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb
        largeModSize = 100
    }
    //7zip路径配置项，执行前提是useSign为true
    sevenZip {
        //例如"com.tencent.mm:SevenZip:1.1.10"，将自动根据机器属性获得对应的7za运行文件，推荐使用。
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
    }
}


